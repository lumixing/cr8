00E0 - CLS           - clear
00EE - RET           - return
// 0nnn - SYS addr      - 
1nnn - JP addr       - goto label
2nnn - CALL addr     - call label
3xkk - SE Vx, byte   - if v0 != 12
4xkk - SNE Vx, byte  - if v0 == 12
5xy0 - SE Vx, Vy     - if v0 != v1
6xkk - LD Vx, byte   - v0 = 12
7xkk - ADD Vx, byte  - v0 += 12
8xy0 - LD Vx, Vy     - v0 = v1
8xy1 - OR Vx, Vy     - v0 |= v1
8xy2 - AND Vx, Vy    - v0 &= v1
8xy3 - XOR Vx, Vy    - v0 ^= v1
8xy4 - ADD Vx, Vy    - v0 += v1
8xy5 - SUB Vx, Vy    - v0 -= v1
8xy6 - SHR Vx {, Vy} - v0 >= v1
8xy7 - SUBN Vx, Vy   - v0 =- v1
8xyE - SHL Vx {, Vy} - v0 <= v1
9xy0 - SNE Vx, Vy    - if v0 == v1
Annn - LD I, addr    - i = 69
// Bnnn - JP V0, addr   - jumpr 69
Cxkk - RND Vx, byte  - v0 $= 69
Dxyn - DRW Vx, Vy, n - draw v0 v1 5
Ex9E - SKP Vx        - if v0
ExA1 - SKNP Vx       - if !v0
Fx07 - LD Vx, DT     - v0 = dt
Fx0A - LD Vx, K      - v0 = key
Fx15 - LD DT, Vx     - dt = v0
Fx18 - LD ST, Vx     - st = v0
Fx1E - ADD I, Vx     - i += v0
Fx29 - LD F, Vx      - i = *v0
Fx33 - LD B, Vx      - bcd v0
Fx55 - LD [I], Vx    - write v0
Fx65 - LD Vx, [I]    - read v0

label:
...

sprite:
0x84 0x13 0xad ...
